name: CI for Java Maven Project
on:
  pull_request:
    branches:
      - main
jobs:
  build:
    name: pr-check
    runs-on: ubuntu-latest

    permissions:
      contents: write
    
    services:
      mysql:
        image: mysql:8.0 
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'  
          java-version: '17'  

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      
      - name: Set environment variables for Spring Boot
        run: |
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          
      - name: Run unit tests
        run: mvn test
        
      # Upload ROOT.jar file artifact
      - name: Build Maven JAR
        run: |
             mvn clean package 
             pwd
             rm -rf imgbuild
             mkdir imgbuild && cp target/webapp-0.0.1-SNAPSHOT.jar imgbuild  
             cp imgbuild/webapp-0.0.1-SNAPSHOT.jar /home/runner/work/webapp/webapp/ROOT.jar
             cd /home/runner/work/webapp/webapp && ls -all
             cd /home/runner/work/webapp/webapp/imgbuild && ls -all
             cd /home/runner/work/webapp/webapp/target && ls -all
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_REGION : ${{ secrets.AWS_REGION }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run Packer fmt
        run: packer fmt -check -diff ./packer/
        continue-on-error: true


      - name: Run Packer validate
        run: |
          packer init ./packer/
          packer validate -var-file=./packer/variables.pkrvars.hcl ./packer/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PKR_VAR_MYSQL_USER: ${{ secrets.DB_USER }}
          PKR_VAR_MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          PKR_VAR_MYSQL_DATABASE: ${{ secrets.DB_NAME }}
      
